name: Build Release Multi-platform

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'
  release:
    types: [created]

jobs:
  build:
    strategy:
      matrix:
        include:
          # --- Linux ---
          - os: ubuntu-latest
            arch: x86_64
            asset_suffix: linux-x86_64
            docker_platform: linux/amd64
          - os: ubuntu-latest
            arch: arm64
            asset_suffix: linux-arm64
            docker_platform: linux/arm64
          # --- MacOS ---
          - os: macos-14 # arm64 runner
            arch: arm64
            asset_suffix: macos-arm64
          - os: macos-13 # x86_64 runner
            arch: x86_64
            asset_suffix: macos-x86_64
          # --- Windows ---
          - os: windows-latest
            arch: x86_64
            asset_suffix: windows-x86_64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ==== Linux（本机/容器多架构） ====
      - name: Set up QEMU for ARM
        if: startsWith(matrix.os, 'ubuntu')
        uses: docker/setup-qemu-action@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Build on Linux Multi-Arch (via Docker)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          docker run --rm --platform=${{ matrix.docker_platform }} \
            -v $PWD:/workspace -w /workspace \
            python:3 bash -c "
              apt-get update && apt-get install -y gcc && \
              pip install -r requirements.txt && pip install pyinstaller && \
              chmod +x build.sh && ./build.sh auto && \
              cp -r dist dist_${{ matrix.asset_suffix }}
            "
          mkdir -p release
          cp dist_${{ matrix.asset_suffix }}/tricode* release/tricode-${{ matrix.asset_suffix }}

      # ==== MacOS ====
      - name: Build on macOS
        if: startsWith(matrix.os, 'macos')
        run: |
          pip install -r requirements.txt
          pip install pyinstaller
          chmod +x build.sh
          ./build.sh auto
          mkdir -p release
          cp dist/tricode* release/tricode-${{ matrix.asset_suffix }}

      # ==== Windows ====
      - name: Build on Windows
        if: startsWith(matrix.os, 'windows')
        shell: cmd
        run: |
          pip install -r requirements.txt
          pip install pyinstaller
          build.bat auto
          mkdir release
          copy dist\tricode.exe release\tricode-${{ matrix.asset_suffix }}.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tricode-${{ matrix.asset_suffix }}
          path: |
            release/tricode-${{ matrix.asset_suffix }}*
          
      - name: Upload to release
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} release/tricode-${{ matrix.asset_suffix }}* --clobber
