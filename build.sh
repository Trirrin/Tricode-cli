#!/bin/bash
# 构建项目为二进制文件
# 使用方法: ./build.sh [版本号]
# 例如: ./build.sh v1.0.0

VERSION=${1:-"dev"}
echo "构建版本: $VERSION"
# 获取当前 Git commit ID
if git rev-parse --git-dir > /dev/null 2>&1; then
    COMMIT_ID=$(git rev-parse --short HEAD)
    echo "Commit ID: $COMMIT_ID"
else
    COMMIT_ID="unknown"
    echo "警告: 不在 Git 仓库中，commit ID 将设置为 'unknown'"
fi

# 检查是否安装了pyinstaller
if ! command -v pyinstaller &> /dev/null
then
    echo "PyInstaller 未安装，请先运行: pip install pyinstaller"
    exit 1
fi

# 删除之前的构建
rm -rf dist build __pycache__
# 生成版本信息文件
echo "生成版本信息文件..."
cat > version.py << EOF
#!/usr/bin/env python
"""
Version information for Tricode CLI
This file is automatically generated during build process
"""

import subprocess
import os

# Build-time version information
__version__ = "${VERSION}"
__commit_id__ = "${COMMIT_ID}"

def get_version_string():
    """Get formatted version string"""
    return f"Tricode-cli {__version__}"

def get_full_version_string():
    """Get full version string with commit ID"""
    return f"Tricode-cli {__version__} (git-{__commit_id__})"

def get_version_info():
    """Get version information as a dictionary"""
    return {
        "version": __version__,
        "commit_id": __commit_id__,
        "full": get_full_version_string()
    }

def get_runtime_commit_id():
    """
    Try to get commit ID at runtime (for development mode)
    Falls back to build-time commit ID if not in a git repo
    """
    if __commit_id__ != "unknown":
        return __commit_id__
    
    try:
        commit = subprocess.check_output(
            ['git', 'rev-parse', '--short', 'HEAD'],
            stderr=subprocess.DEVNULL,
            text=True,
            cwd=os.path.dirname(os.path.abspath(__file__))
        ).strip()
        return commit
    except (subprocess.CalledProcessError, FileNotFoundError):
        return "unknown"

def get_runtime_version():
    """Get version with runtime commit ID detection"""
    commit = get_runtime_commit_id()
    return f"Tricode-cli {__version__} (git-{commit})"
EOF

echo "版本信息文件已生成: version.py"

# 创建一个临时的 spec 文件，包含版本信息
if [ -f tricode.spec ]; then
    # 复制 spec 文件并添加版本信息到 exe 名称
    cp tricode.spec tricode_versioned.spec
    # 修改输出文件名以包含版本号
    sed -i "s/name='tricode'/name='tricode-${VERSION}'/g" tricode_versioned.spec
    pyinstaller tricode_versioned.spec
    # 清理临时文件
    rm -f tricode_versioned.spec
    # 创建一个不带版本号的符号链接，方便使用
    if [ -f "dist/tricode-${VERSION}" ]; then
        ln -sf "tricode-${VERSION}" dist/tricode
    fi
else
    pyinstaller --onefile --name "tricode-${VERSION}" \
        --hidden-import=tiktoken_ext \
        --hidden-import=tiktoken_ext.openai_public \
        --collect-data tiktoken_ext \
        tricode.py
    # 创建一个不带版本号的符号链接
    if [ -f "dist/tricode-${VERSION}" ]; then
        ln -sf "tricode-${VERSION}" dist/tricode
    fi
fi

echo "打包完成！"
echo "版本化二进制文件: dist/tricode-${VERSION}"
if [ -L dist/tricode ]; then
    echo "通用符号链接: dist/tricode -> tricode-${VERSION}"
fi
