@echo off
REM Tricode-cli Build Script for Windows
REM Usage: build.bat [version]
REM Example: build.bat v1.0.0

setlocal enabledelayedexpansion

REM Get version parameter, default to "dev"
set VERSION=%1
if "%VERSION%"=="" set VERSION=dev
if "%VERSION%"=="auto" set VERSION=dev

echo Building version: %VERSION%

REM Get Git commit ID
set COMMIT_ID=unknown
where git >nul 2>nul
if %ERRORLEVEL% equ 0 (
    for /f "delims=" %%i in ('git rev-parse --short HEAD 2^>nul') do set COMMIT_ID=%%i
    if "!COMMIT_ID!"=="" set COMMIT_ID=unknown
    echo Commit ID: !COMMIT_ID!
) else (
    echo Warning: Git not found, commit ID will be set to 'unknown'
)

REM Check if PyInstaller is installed
where pyinstaller >nul 2>nul
if %ERRORLEVEL% neq 0 (
    echo PyInstaller not found, please install: pip install pyinstaller
    exit /b 1
)

REM Clean previous builds
echo Cleaning previous builds...
if exist dist rmdir /s /q dist
if exist build rmdir /s /q build
if exist __pycache__ rmdir /s /q __pycache__

REM Generate version.py file
echo Generating version information file...
(
echo #!/usr/bin/env python
echo """
echo Version information for Tricode CLI
echo This file is automatically generated during build process
echo """
echo.
echo import subprocess
echo import os
echo.
echo # Build-time version information
echo __version__ = "%VERSION%"
echo __commit_id__ = "%COMMIT_ID%"
echo.
echo def get_version_string^(^):
echo     """Get formatted version string"""
echo     return f"Tricode-cli {__version__}"
echo.
echo def get_full_version_string^(^):
echo     """Get full version string with commit ID"""
echo     return f"Tricode-cli {__version__} (git-{__commit_id__})"
echo.
echo def get_version_info^(^):
echo     """Get version information as a dictionary"""
echo     return {
echo         "version": __version__,
echo         "commit_id": __commit_id__,
echo         "full": get_full_version_string^(^)
echo     }
echo.
echo def get_runtime_commit_id^(^):
echo     """
echo     Try to get commit ID at runtime (for development mode^)
echo     Falls back to build-time commit ID if not in a git repo
echo     """
echo     if __commit_id__ != "unknown":
echo         return __commit_id__
echo.    
echo     try:
echo         commit = subprocess.check_output(
echo             ['git', 'rev-parse', '--short', 'HEAD'],
echo             stderr=subprocess.DEVNULL,
echo             text=True,
echo             cwd=os.path.dirname(os.path.abspath(__file__^)^)
echo         ^).strip^(^)
echo         return commit
echo     except (subprocess.CalledProcessError, FileNotFoundError^):
echo         return "unknown"
echo.
echo def get_runtime_version^(^):
echo     """Get version with runtime commit ID detection"""
echo     commit = get_runtime_commit_id^(^)
echo     return f"Tricode-cli {__version__} (git-{commit})"
) > version.py

echo Version file generated: version.py

REM Build with PyInstaller
echo Building with PyInstaller...
if exist tricode.spec (
    pyinstaller tricode.spec
) else (
    pyinstaller --onefile --name "tricode" ^
        --hidden-import=tiktoken_ext ^
        --hidden-import=tiktoken_ext.openai_public ^
        --collect-data tiktoken_ext ^
        tricode.py
)

if %ERRORLEVEL% neq 0 (
    echo Build failed!
    exit /b 1
)

echo.
echo Build complete!
echo Binary: dist\tricode.exe

endlocal
